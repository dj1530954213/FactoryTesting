// <auto-generated />
using System;
using FatFullVersion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FatFullVersion.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250409072557_AddChannelMappingsTable")]
    partial class AddChannelMappingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("FatFullVersion.Entities.PlcConnectionConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AddressStartWithZero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConnectTimeOut")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCheckMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPersistentConnection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStringReverse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTestPlc")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiveTimeOut")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SleepTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SocketKeepAliveTime")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Station")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PlcConnections");
                });

            modelBuilder.Entity("FatFullVersion.Entities.ValueObject.ComparisonTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommunicationAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ComparisonTables");
                });

            modelBuilder.Entity("FatFullVersion.Models.ChannelMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessProperty")
                        .HasColumnType("TEXT");

                    b.Property<double>("ActualValue")
                        .HasColumnType("REAL");

                    b.Property<string>("ChannelTag")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CurrentValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<double>("ExpectedValue")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("FinalTestTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HAlarm")
                        .HasColumnType("TEXT");

                    b.Property<string>("HAlarmCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("HAlarmPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("HHAlarm")
                        .HasColumnType("TEXT");

                    b.Property<string>("HHAlarmCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("HHAlarmPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardPointTestResult")
                        .HasColumnType("TEXT");

                    b.Property<string>("HighAlarmStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("HighHighAlarmStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("LAlarm")
                        .HasColumnType("TEXT");

                    b.Property<string>("LAlarmCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LAlarmPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LLAlarm")
                        .HasColumnType("TEXT");

                    b.Property<string>("LLAlarmCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LLAlarmPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("LowAlarmStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("LowLowAlarmStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceEnableSwitchPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceEnableSwitchPointCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceEnableSwitchPointPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceFunction")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceValueSetPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceValueSetPointCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceValueSetPointPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceValueSetting")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MonitorStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("PLCAbsoluteAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlcCommunicationAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerFailureProtection")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerSupplyType")
                        .HasColumnType("TEXT");

                    b.Property<string>("RangeLowerLimit")
                        .HasColumnType("TEXT");

                    b.Property<float>("RangeLowerLimitValue")
                        .HasColumnType("REAL");

                    b.Property<string>("RangeUpperLimit")
                        .HasColumnType("TEXT");

                    b.Property<float>("RangeUpperLimitValue")
                        .HasColumnType("REAL");

                    b.Property<string>("ResultText")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHHSetPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHHSetPointCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHHSetPointPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHHSetValue")
                        .HasColumnType("TEXT");

                    b.Property<float>("SHHSetValueNumber")
                        .HasColumnType("REAL");

                    b.Property<string>("SHSetPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHSetPointCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHSetPointPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHSetValue")
                        .HasColumnType("TEXT");

                    b.Property<float>("SHSetValueNumber")
                        .HasColumnType("REAL");

                    b.Property<string>("SLLSetPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("SLLSetPointCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SLLSetPointPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SLLSetValue")
                        .HasColumnType("TEXT");

                    b.Property<float>("SLLSetValueNumber")
                        .HasColumnType("REAL");

                    b.Property<string>("SLSetPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("SLSetPointCommAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SLSetPointPLCAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SLSetValue")
                        .HasColumnType("TEXT");

                    b.Property<float>("SLSetValueNumber")
                        .HasColumnType("REAL");

                    b.Property<string>("SaveHistory")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShowValueStatus")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestBatch")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestPLCChannelTag")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestPLCCommunicationAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestResultStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestTag")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TestTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value0Percent")
                        .HasColumnType("REAL");

                    b.Property<double>("Value100Percent")
                        .HasColumnType("REAL");

                    b.Property<double>("Value25Percent")
                        .HasColumnType("REAL");

                    b.Property<double>("Value50Percent")
                        .HasColumnType("REAL");

                    b.Property<double>("Value75Percent")
                        .HasColumnType("REAL");

                    b.Property<string>("VariableDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("WireSystem")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestTag");

                    b.ToTable("ChannelMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
