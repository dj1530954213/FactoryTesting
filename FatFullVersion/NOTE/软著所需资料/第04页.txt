软件源代码文档 - 第 4 页
==================================================
项目名称: FatFullVersion - 工业自动化测试系统
文档生成时间: 2025-05-26 10:49:03
页码: 4 / 578
==================================================

0151:                     // 初始化数据
0152:                     var repository = container.Resolve<IRepository>();
0153:                     repository.InitializeDatabaseAsync().GetAwaiter().GetResult();
0154:                 }
0155:                 catch (Exception ex)
0156:                 {
0157:                     MessageBox.Show($"初始化数据库数据失败：{ex.Message}", "错误", MessageBoxButton.OK, MessageBoxImage.Error);
0158:                     // 继续运行程序，但后续可能出现数据库相关错误
0159:                 }
0160: 
0161:                 try
0162:                 {
0163:                     // 注册PLC通信工厂 - 分别为测试PLC和被测PLC创建工厂
0164:                     var testPlcFactory = new PlcCommunicationFactory(container.Resolve<IRepository>(), PlcType.TestPlc);
0165:                     var targetPlcFactory = new PlcCommunicationFactory(container.Resolve<IRepository>(), PlcType.TargetPlc);
0166: 
0167:                     // 将两个工厂注册到容器中
0168:                     container.RegisterInstance(testPlcFactory, serviceKey: "TestPlcFactory");
0169:                     container.RegisterInstance(targetPlcFactory, serviceKey: "TargetPlcFactory");
0170: 
0171:                     // 分别创建测试PLC和被测PLC的通信实例
0172:                     var testPlcCommunication = testPlcFactory.CreatePlcCommunication();
0173:                     var targetPlcCommunication = targetPlcFactory.CreatePlcCommunication();
0174: 
0175:                     // 将两个通信实例注册到容器中
0176:                     container.RegisterInstance<IPlcCommunication>(testPlcCommunication, serviceKey: "TestPlcCommunication");
0177:                     container.RegisterInstance<IPlcCommunication>(targetPlcCommunication, serviceKey: "TargetPlcCommunication");
0178:                     
0179:                     // 为DataEditView注册特定的PLC通信服务
0180:                     container.RegisterDelegate<IPlcCommunication>(
0181:                         factoryDelegate: r => r.Resolve<IPlcCommunication>(serviceKey: "TestPlcCommunication"), 
0182:                         serviceKey: "TestPlc");
0183:                     container.RegisterDelegate<IPlcCommunication>(
0184:                         factoryDelegate: r => r.Resolve<IPlcCommunication>(serviceKey: "TargetPlcCommunication"), 
0185:                         serviceKey: "TargetPlc");
0186:                 }
0187:                 catch (Exception ex)
0188:                 {
0189:                     MessageBox.Show($"初始化PLC通信失败：{ex.Message}", "错误", MessageBoxButton.OK, MessageBoxImage.Error);
0190:                     // 继续运行程序，但后续可能出现PLC通信相关错误
0191:                 }
0192: 
0193:                 // 注册测试任务管理器
0194:                 containerRegistry.RegisterSingleton<ITestTaskManager, TestTaskManager>();
0195: 
0196:                 //注册历史恢复服务
0197:                 containerRegistry.RegisterSingleton<ITestRecordService, TestRecordService>();
0198:                 
0199:                 // 注册视图用于导航
0200:                 containerRegistry.RegisterForNavigation<DataEditView>();
